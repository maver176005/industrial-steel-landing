const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

exports.handler = async (event) => {
    if (event.httpMethod !== 'POST') {
        return { statusCode: 405, body: 'Method Not Allowed' };
    }

    try {
        const data = JSON.parse(event.body);

        // –í–∞–ª–∏–¥–∞—Ü–∏—è (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è)
        if (!data.name || !data.phone || !data.buildingType) {
            return { statusCode: 400, body: 'Missing required fields' };
        }

        const cleanPhone = '+7' + data.phone.replace(/\D/g, '').slice(-10);
        const message = `
üÜï –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –° –°–ê–ô–¢–ê

üìã –¢–∏–ø: ${data.buildingType}
üë§ –ò–º—è: ${data.name}
üè¢ –ö–æ–º–ø–∞–Ω–∏—è: ${data.company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${cleanPhone}
üìß Email: ${data.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìê –ü–ª–æ—â–∞–¥—å: ${data.area || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'} –º¬≤

üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${data.message || '–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'}
    `.trim();

        const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                chat_id: TELEGRAM_CHAT_ID,
                text: message,
            }),
        });

        if (response.ok) {
            return { statusCode: 200, body: JSON.stringify({ success: true }) };
        } else {
            return { statusCode: 500, body: 'Telegram error' };
        }
    } catch (error) {
        console.error('Function error:', error);
        return { statusCode: 500, body: 'Internal Server Error' };
    }
};